
AVLSet implements Set
	Set implementado por un árbol AVL. En las operaciones de borrado e
inserción se baja por el árbol una única vez, llevando a cabo la operación y
las necesarias rotaciones; no se inserta/borra por un lado y luego se baja por
el árbol nuevamente para balancear, se hace todo en una única bajada.
	El árbol provee un iterador HigherIterator que dado un valor devuelve los
elementos mayores o iguales a dicho valor. Si bien faltaría un LowerIterator,
este no se realizó porque no era necesario.
	Finalmente se encuentran los métodos addAndReplace y find. El primero
agrega un elemento normalmente pero si ya existía lo reemplaza por el elemento
a agregar, en lugar de no hacer nada como hace add en ese caso. El segundo
método, dado un valor lo busca en el árbol y devuelve ese valor. Estos dos
métodos existen únicamente para que un AVLMap pueda estar compuesto por un
AVLSet. De esta forma se reusa código.

AVLMap implements SimpleMap
	Mapa compuesto por un AVLSet. Se insertan nodos con los pares clave valor
y se comparan según la clave. 
	En el método put se hace uso de addAndReplace
para poder pisar el valor de una clave ya existente. En el método get se hace
uso de find: el set buscará respecto de la key y devolverá el par clave valor.

AVLHashMap implements SimpleMap
    Tabla de Hash abierta compuesta por Mapas Avl en las zonas de overflow.
Tiene una cantidad de buckets fija otorgada al inicializar el hash; no se
expande.

BinaryMinHeap implements PriorityQueue
	Heap binario que asegura O(1) en los métodos getPriority, minPriority,
isEmpty y size; y O(log n) en los métodos enqueue, dequeue y decreasePriority.
	El tamaño del heap se define en el contructor y no se expande. Está
compuesto por un arreglo y una tabla de hash cerrada que cumple con el rol de
Mapa donde se guardan los elementos como claves y su posición dentro del
arreglo como valor. Esto último es primordial para que los métodos
getPriority y decreasePriority tengan los órdenes descriptos, pues no hace
falta buscar el elemento dentro del arreglo (operación O(N)), sino que se
consulta a la tabla de hash. Esta última se inicializa siempre con una
capacidad inicial del triple al tamaño del heap, reduciendo asi la 
cantidad de clusters y su tamaño.

ClosedHashMap implements SimpleMap
	Tabla de hash cerrado con rehasheo lineal. Cuando se encuentra 2/3
llena se expande. Se usa únicamente dentro del BinaryMinHeap y se inicializa
con el triple de capacidad respecto de la cantidad de elementos a insertar; es
decir que siempre se encuentra 1/3 llena por lo que nunca es necesario
expandir. De esta forma además se asegura tener una cantidad mínima de
clusters logrando así O(1) en los métodos de inserción, búsqueda y borrado;
los únicos utilizados dentro del BinaryMinHeap.
