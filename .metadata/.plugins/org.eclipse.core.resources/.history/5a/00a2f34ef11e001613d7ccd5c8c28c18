package structures;

import java.util.Collection;
import java.util.Comparator;
import java.util.Set;

public class AVLMap<K, V> implements SimpleMap<K, V> {

	private Node<K,V> root;
	private Comparator<K> cmp;
	private int size;

	public AVLMap(Comparator<K> c) {
		cmp = c;
	}

	public boolean contains(K key) {
		return contains(key, root);
	}

	public boolean contains(K key, Node<K,V> n) {
		if (n == null)
			return false;
		int comp = cmp.compare(key, n.key);
		if (comp > 0)
			return contains(key, n.right);
		else if (comp < 0)
			return contains(key, n.left);
		return true;
	}

	public void insert(K key, V value) {
		root = insert(key, value, root);
	}

	private Node<K,V> insert(K key, V value, Node<K,V> n) {
		if (n == null) {
			size += 1;
			return new Node<K,V>(key, value);
		}
		int comp = cmp.compare(key, n.key);
		if (comp > 0)
			n.right = insert(key, value, n.right);
		else if (comp < 0)
			n.left = insert(key, value, n.left);
		else
			n.value = value;
		n.updateHeight();
		return rebalance(n);
	}

	private Node<K,V> rebalance(Node<K,V> n) {
		int bf = n.getBF();
		if (bf < -1) {
			if (n.right.getBF() > 0)
				n.right = rotateRight(n.right);
			n = rotateLeft(n);
		}
		else if (bf > 1) {
			if (n.left.getBF() < 0)
				n.left = rotateLeft(n.left);
			n = rotateRight(n);
		}
		return n;
	}

	public void remove(K key) {
		root = remove(key, root);
	}

	private Node<K,V> remove(K key, Node<K,V> n) {
		if (n == null)
			return n;
		int comp = cmp.compare(key, n.key);

		if (comp < 0)
			n.left = remove(key, n.left);
		else if (comp > 0)
			n.right = remove(key, n.right);
		else {
			size -= 1;

			if(!n.hasChildren())
				return null;

			if (!n.hasBothChildren())
				return n.hasRightChild() ? n.right : n.left;

			if (n.right.hasLeftChild()) {
				Node <K, V> min = removeMin(n.right.left, n.right); // devuelve el minímo mientras balancea
				n.key = min.key;
				n.value = min.value;
			}
			else {
				n.key = n.right.key;
				n.value = n.right.value;
				n.right = n.right.right;
			}
		}

		n.updateHeight();
		return rebalance(n);
	}

	private Node<K, V> removeMin(Node<K,V> n, Node<K,V> prev) {
		if (!n.hasLeftChild()) { // borro el mínimo
			prev.left = n.right;
			return n;
		}
		Node<K,V> min = removeMin(n.left, n);
		n.updateHeight();
		prev.left = rebalance(n);
		return min;
	}

	private Node<K,V> rotateLeft(Node<K,V> n) {
		Node<K,V> right = n.right;
		n.right = right.left;
		right.left = n;
		n.updateHeight();
		right.updateHeight();
		return right; // devolvemos lo q ahora ocupa el lugar de n
	}

	private Node<K,V> rotateRight(Node<K,V> n) {
		Node<K,V> left = n.left;
		n.left = left.right;
		left.right = n;
		n.updateHeight();
		left.updateHeight();
		return left; // devolvemos lo q ahora ocupa el lugar de n
	}

	private static class Node<K,V> {
		private K key;
		private V value;
		private Node<K,V> left;
		private Node<K,V> right;
		private int height;

		public Node(K key, V value) {
			this.key = key;
			this.value = value;
		}

		public void updateHeight() {
			int lh = left == null ? -1 : left.height;
			int rh = right == null ? -1 : right.height;
			height = Integer.max(lh, rh) + 1;
		}

		public boolean hasChildren() {
			return hasLeftChild() || hasRightChild();
		}

		public boolean hasLeftChild() {
			return left != null;
		}

		public boolean hasRightChild() {
			return right != null;
		}

		public boolean hasBothChildren() {
			return hasLeftChild() && hasRightChild();
		}

		public int getBF() {
			int lh = left == null ? -1 : left.height;
			int rh = right == null ? -1 : right.height;
			return lh - rh;
		}
	}


	@Override
	public void put(K key, V value) {
		// TODO Auto-generated method stub
	}

	@Override
	public V get(K key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

}
