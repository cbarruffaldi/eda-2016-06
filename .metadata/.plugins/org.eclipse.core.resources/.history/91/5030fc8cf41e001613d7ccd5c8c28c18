package structures;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Set;

public class SimpleHashMap<K, V> implements SimpleMap<K, V> {
	private static final int DEFAULT_CAPACITY = 20;

	private int size;
	private AVLMap<K,V>[] buckets;
	private int mod;

	@SuppressWarnings("unchecked")
	public SimpleHashMap(int capacity, Comparator<K> comparator) {
		if (capacity < 1)
			throw new IllegalArgumentException("Illegal capacity < 1");
		mod = capacity;
		buckets = (AVLMap[]) Array.newInstance(AVLMap.class, capacity);

		for (int i = 0; i < buckets.length; i++)
			buckets[i] = new AVLMap(comparator);
	}

	@Override
	public void put(K key, V value) {
		// TODO Auto-generated method stub

	}

	@Override
	public V get(K key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void remove(K key) {
		// TODO Auto-generated method stub

	}

	@Override
	public Set<K> keySet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<V> values() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

}
