package structures;

import java.util.ArrayList;
import java.util.Comparator;

public class BinaryMinHeap<T> {
	private ArrayList<T> array;
	private Comparator<T> cmp;

	public BinaryMinHeap(Comparator<T> cmp) {
		this.cmp = cmp;
		array = new ArrayList<>();
	}

	public BinaryMinHeap(Comparator<T> cmp, int initialCapacity) {
		if (initialCapacity < 1)
			throw new IllegalArgumentException("Illegal capacity < 1");
		this.cmp = cmp;
		array = new ArrayList<>(initialCapacity);
	}

	private int moveUp(int i) {
		int parent = getParent(i);
		T elem = array.get(i);
		while (i != 0 && cmp.compare(elem, array.get(parent)) < 0) {
			array.set(i, array.get(parent));
			i = parent;
			parent = getParent(i);
		}
		array.set(i, elem);
		return i;
	}

	private int getParent(int i) {
		return (i-1)/2;
	}

	private int getLeft(int i) {
		return i*2+1;
	}

	private int getRight(int i) {
		return i*2+2;
	}
}
